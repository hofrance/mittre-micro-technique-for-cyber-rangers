#!/bin/bash

# T1595_003B - vulnerability_scanning-generic_database_discovery
# MITRE ATT&CK Enterprise - Reconnaissance Tactic (TA0043)
# ATOMIC ACTION: Generic Database Discovery scanning using specialized techniques ONLY
# Platform: Linux | Contract: One action, one dependency, one privilege tier
#  T1595_003B
function Get-Configuration {
    echo "[DEBUG] Loading configuration for T1595_003B" >&2

        # Variable TARGETS critique - vérification ajoutée
    export T1595_003b_OUTPUT_BASE="${T1595_003B_OUTPUT_BASE:-/tmp/mitre_results}"
    export T1595_003b_OUTPUT_MODE="${T1595_003B_OUTPUT_MODE:-simple}"
    export T1595_003b_SILENT_MODE="${T1595_003B_SILENT_MODE:-false}"
    export T1595_003b_SERVICE_DETECTION="${T1595_003B_SERVICE_DETECTION:-true}"
    export T1595_003b_VERSION_DETECTION="${T1595_003B_VERSION_DETECTION:-true}"
    export T1595_003b_TIMING_TEMPLATE="${T1595_003B_TIMING_TEMPLATE:-normal}"
    export T1595_003b_RATE_LIMIT="${T1595_003B_RATE_LIMIT:-10}"

    if [[ -z "$T1595_003B_TARGETS" ]]; then
        [[ "$T1595_003B_SILENT_MODE" != "true" ]] && echo "[ERROR] T1595_003B_TARGETS is required" >&2
        return 1
    fi

    local timestamp=$(date +%Y%m%d_%H%M%S)
    export T1595_003b_RESULTS_DIR="$T1595_003B_OUTPUT_BASE/T1595_003B_${timestamp}"
    mkdir -p "$T1595_003B_RESULTS_DIR" 2>/dev/null || {
        [[ "$T1595_003B_SILENT_MODE" != "true" ]] && echo "[ERROR] Cannot create output directory" >&2
        return 1
    }

    return 0

    # ===== VÉRIFICATIONS VARIABLES CRITIQUES =====
    
    # Vérification TARGETS (si utilisée)
    if grep -q "TARGETS" "../reconnaissance/linux/t1595.003b-vulnerability_scanning-generic_database_discovery-linux/src/main.sh" && [[ -z "${T1595_003B_TARGETS:-}" ]]; then
        echo "Error: TARGET parameter is required. Please specify target hosts or networks." >&2
        echo "Usage: T1595_003B_TARGETS='192.168.1.0/24' $0" >&2
        return 1
    fi
    
    # Vérification WORDLIST (si utilisée)
    if grep -q "WORDLIST" "../reconnaissance/linux/t1595.003b-vulnerability_scanning-generic_database_discovery-linux/src/main.sh" && [[ -z "${T1595_003B_WORDLIST:-}" ]]; then
        echo "Error: WORDLIST parameter is required for scanning." >&2
        return 1
    fi
    
    # Export des variables critiques si elles existent
    [[ -n "${T1595_003B_TARGETS:-}" ]] && export T1595_003B_TARGETS="$T1595_003B_TARGETS"
    [[ -n "${T1595_003B_WORDLIST:-}" ]] && export T1595_003B_WORDLIST="$T1595_003B_WORDLIST"
    
    # ===== FIN VÉRIFICATIONS CRITIQUES =====


    # ===== VARIABLES ESSENTIELLES RECONNAISSANCE =====
    export T1595_003B_DEBUG_MODE="${T1595_003B_DEBUG_MODE:-false}"
    export T1595_003B_TIMEOUT="${T1595_003B_TIMEOUT:-300}"
    export T1595_003B_FALLBACK_MODE="${T1595_003B_FALLBACK_MODE:-simulation}"
    export T1595_003B_OUTPUT_FORMAT="${T1595_003B_OUTPUT_FORMAT:-json}"
    export T1595_003B_POLICY_CHECK="${T1595_003B_POLICY_CHECK:-true}"
    export T1595_003B_RATE_LIMIT="${T1595_003B_RATE_LIMIT:-10}"
    export T1595_003B_MAX_HOSTS="${T1595_003B_MAX_HOSTS:-254}"
    export T1595_003B_SCAN_DEPTH="${T1595_003B_SCAN_DEPTH:-basic}"
    export T1595_003B_TIMING_TEMPLATE="${T1595_003B_TIMING_TEMPLATE:-normal}"
    export T1595_003B_SERVICE_DETECTION="${T1595_003B_SERVICE_DETECTION:-true}"
    # ===== FIN VARIABLES RECONNAISSANCE =====

}

function Precondition-Check {
    echo "[DEBUG] Checking preconditions for T1595_003B" >&2

    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        [[ "$T1595_003B_SILENT_MODE" != "true" ]] && echo "[ERROR] This technique requires Linux" >&2
        return 2
    fi

    if ! command -v nmap &> /dev/null; then
        [[ "$T1595_003B_SILENT_MODE" != "true" ]] && echo "[ERROR] nmap is required but not installed" >&2
        return 2
    fi

    return 0
}

function Atomic-Action {
    echo "[DEBUG] Executing atomic action for T1595_003B" >&2

    local scan_results="$T1595_003B_RESULTS_DIR/scan_results.json"
    local technical_details="$T1595_003B_RESULTS_DIR/technical_details.xml"
    local scan_start=$(date +%s)

    local nmap_cmd="nmap -sV -p 3306,5432,27017,6379,1433"

    if [[ "$T1595_003B_SERVICE_DETECTION" == "true" ]]; then
        nmap_cmd="$nmap_cmd -sV"
    fi

    if [[ "$T1595_003B_VERSION_DETECTION" == "true" ]]; then
        nmap_cmd="$nmap_cmd --version-intensity 7"
    fi

    case "$T1595_003B_TIMING_TEMPLATE" in
        "normal")
            nmap_cmd="$nmap_cmd -T3"
            ;;
        "aggressive")
            nmap_cmd="$nmap_cmd -T4"
            ;;
    esac

    if [[ "$T1595_003B_RATE_LIMIT" != "0" ]]; then
        nmap_cmd="$nmap_cmd --max-rate $T1595_003B_RATE_LIMIT"
    fi

    nmap_cmd="$nmap_cmd $T1595_003B_TARGETS"

    [[ "$T1595_003B_OUTPUT_MODE" == "debug" ]] && echo "[DEBUG] Executing: $nmap_cmd" >&2

    if ! eval "$nmap_cmd -oX $technical_details -oG $T1595_003B_RESULTS_DIR/grepable_output.txt" > "$T1595_003B_RESULTS_DIR/nmap_output.txt" 2>&1; then
        [[ "$T1595_003B_SILENT_MODE" != "true" ]] && echo "[ERROR] Generic Database Discovery scan failed" >&2
        return 3
    fi

    local scan_end=$(date +%s)
    local scan_duration=$((scan_end - scan_start))
    local services_found=$(grep -c "service.*name=" "$technical_details" 2>/dev/null || echo "0")

    cat > "$scan_results" << JSON_EOF
{
  "technique_id": "T1595_003B",
  "technique_name": "vulnerability_scanning-generic_database_discovery",
  "scan_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "scan_type": "Generic Database Discovery",
  "category": "Database Scanning",
  "scan_duration_seconds": $scan_duration,
  "results": {
    "services_found": $services_found,
    "scan_successful": true
  }
}
JSON_EOF

    return 0
}

function Postcondition-Verify {
    echo "[DEBUG] Verifying postconditions for T1595_003B" >&2

    local results_dir="$T1595_003B_RESULTS_DIR"
    local scan_results="$results_dir/scan_results.json"

    if [[ ! -f "$scan_results" ]]; then
        [[ "$T1595_003B_SILENT_MODE" != "true" ]] && echo "[ERROR] Scan results file missing" >&2
        return 4
    fi

    if ! jq empty "$scan_results" 2>/dev/null; then
        [[ "$T1595_003B_SILENT_MODE" != "true" ]] && echo "[ERROR] Invalid JSON in scan results" >&2
        return 4
    fi

    local metadata_file="$results_dir/metadata/execution_metadata.json"
    mkdir -p "$results_dir/metadata"

    cat > "$metadata_file" << META_EOF
{
  "execution_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "technique_id": "T1595_003B",
  "technique_name": "vulnerability_scanning-generic_database_discovery",
  "category": "Database Scanning",
  "execution_mode": "$T1595_003B_OUTPUT_MODE"
}
META_EOF

    return 0
}

main() {
    Get-Configuration || exit $?
    Precondition-Check || exit $?
    Atomic-Action || exit $?

    case "$T1595_003B_OUTPUT_MODE" in
        "debug")
            echo "[DEBUG] vulnerability_scanning-generic_database_discovery completed successfully" >&2
            echo "[DEBUG] Results saved to: $T1595_003B_RESULTS_DIR" >&2
            ;;
        "simple")
            echo "[SUCCESS] vulnerability_scanning-generic_database_discovery completed" >&2
            echo "[INFO] Results saved to: $T1595_003B_RESULTS_DIR" >&2
            ;;
        "stealth")
            ;;
        "silent")
            ;;
        *)
            echo "[INFO] vulnerability_scanning-generic_database_discovery completed" >&2
            ;;
    esac

    Postcondition-Verify || exit $?
}

main "$@"
