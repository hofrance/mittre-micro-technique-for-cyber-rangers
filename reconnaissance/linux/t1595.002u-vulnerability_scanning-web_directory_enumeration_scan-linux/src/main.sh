#!/bin/bash

# t1595_002u - ${technique_name}
# MITRE ATT&CK Enterprise - Reconnaissance Tactic (TA0043)
# ATOMIC ACTION: ${web_scan_type} scanning using web reconnaissance tools ONLY
# Platform: Linux | Contract: One action, one dependency, one privilege tier
#  t1595_002u

# FUNCTION 1/4 : CONFIGURATION AND PRECONDITION VALIDATION

function Get-Configuration {
    echo "[DEBUG] Loading configuration for t1595_002u" >&2

    # Core Configuration
    # Syntaxe corrigée
    eval "    # Variable TARGETS critique - vérification ajoutée"
    # Fin correction
    export t1595_002u_OUTPUT_BASE="${t1595_002u_OUTPUT_BASE:-/tmp/mitre_results}"
    export t1595_002u_OUTPUT_MODE="${t1595_002u_OUTPUT_MODE:-simple}"
    export t1595_002u_SILENT_MODE="${t1595_002u_SILENT_MODE:-false}"

    # Web Scanning Configuration
    export t1595_002u_WEB_PORTS="${t1595_002u_WEB_PORTS:-80,443,8080,8443}"
    export t1595_002u_USER_AGENT="${t1595_002u_USER_AGENT:-Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36}"
    export t1595_002u_TIMEOUT="${t1595_002u_TIMEOUT:-10}"
    export t1595_002u_THREADS="${t1595_002u_THREADS:-10}"
    export t1595_002u_FOLLOW_REDIRECTS="${t1595_002u_FOLLOW_REDIRECTS:-true}"

    # Content Discovery Configuration
        # Variable WORDLIST critique - vérification ajoutée
    export t1595_002u_EXTENSIONS="${t1595_002u_EXTENSIONS:-php,asp,aspx,jsp,html,txt}"
    export t1595_002u_RECURSIVE_SCAN="${t1595_002u_RECURSIVE_SCAN:-false}"
    export t1595_002u_MAX_DEPTH="${t1595_002u_MAX_DEPTH:-3}"
    export t1595_002u_EXCLUDE_PATHS="${t1595_002u_EXCLUDE_PATHS:-}"

    # Technology Detection Configuration
    export t1595_002u_TECHNOLOGY_DETECTION="${t1595_002u_TECHNOLOGY_DETECTION:-true}"
    export t1595_002u_AGGRESSIVE_MODE="${t1595_002u_AGGRESSIVE_MODE:-false}"
    export t1595_002u_PLUGIN_LIST="${t1595_002u_PLUGIN_LIST:-}"
        # Variable CUSTOM_HEADERS critique - vérification ajoutée

    # Advanced Options
        # Variable CUSTOM_FLAGS critique - vérification ajoutée
        # Variable PROXY critique - vérification ajoutée
        # Variable AUTH_CREDENTIALS critique - vérification ajoutée
        # Variable COOKIES critique - vérification ajoutée

    # Validation des paramètres critiques
    if [[ -z "t1595_002u_TARGETS" ]]; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] t1595_002u_TARGETS is required" >&2
        return 1
    fi

    # Validation des URLs
    if [[ ! "${!technique_id}_TARGETS" =~ ^https?:// ]]; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] Targets must be valid HTTP/HTTPS URLs" >&2
        return 1
    fi

    # Création répertoire de sortie
    local timestamp=$(date +%Y%m%d_%H%M%S)
    export t1595_002u_RESULTS_DIR="${t1595_002u_OUTPUT_BASE}/t1595_002u_${timestamp}"
    mkdir -p "${!technique_id}_RESULTS_DIR" 2>/dev/null || {
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] Cannot create output directory" >&2
        return 1
    }

    return 0

    # ===== VÉRIFICATIONS VARIABLES CRITIQUES =====
    
    # Vérification TARGETS (si utilisée)
    if grep -q "TARGETS" "../reconnaissance/linux/t1595.002u-vulnerability_scanning-web_directory_enumeration_scan-linux/src/main.sh" && [[ -z "${T1595_002U_TARGETS:-}" ]]; then
        echo "Error: TARGET parameter is required. Please specify target hosts or networks." >&2
        echo "Usage: T1595_002U_TARGETS='192.168.1.0/24' $0" >&2
        return 1
    fi
    
    # Vérification WORDLIST (si utilisée)
    if grep -q "WORDLIST" "../reconnaissance/linux/t1595.002u-vulnerability_scanning-web_directory_enumeration_scan-linux/src/main.sh" && [[ -z "${T1595_002U_WORDLIST:-}" ]]; then
        echo "Error: WORDLIST parameter is required for scanning." >&2
        return 1
    fi
    
    # Export des variables critiques si elles existent
    [[ -n "${T1595_002U_TARGETS:-}" ]] && export T1595_002U_TARGETS="$T1595_002U_TARGETS"
    [[ -n "${T1595_002U_WORDLIST:-}" ]] && export T1595_002U_WORDLIST="$T1595_002U_WORDLIST"
    
    # ===== FIN VÉRIFICATIONS CRITIQUES =====


    # ===== VARIABLES ESSENTIELLES RECONNAISSANCE =====
    export T1595_002U_DEBUG_MODE="${T1595_002U_DEBUG_MODE:-false}"
    export T1595_002U_TIMEOUT="${T1595_002U_TIMEOUT:-300}"
    export T1595_002U_FALLBACK_MODE="${T1595_002U_FALLBACK_MODE:-simulation}"
    export T1595_002U_OUTPUT_FORMAT="${T1595_002U_OUTPUT_FORMAT:-json}"
    export T1595_002U_POLICY_CHECK="${T1595_002U_POLICY_CHECK:-true}"
    export T1595_002U_RATE_LIMIT="${T1595_002U_RATE_LIMIT:-10}"
    export T1595_002U_MAX_HOSTS="${T1595_002U_MAX_HOSTS:-254}"
    export T1595_002U_SCAN_DEPTH="${T1595_002U_SCAN_DEPTH:-basic}"
    export T1595_002U_TIMING_TEMPLATE="${T1595_002U_TIMING_TEMPLATE:-normal}"
    export T1595_002U_SERVICE_DETECTION="${T1595_002U_SERVICE_DETECTION:-true}"
    # ===== FIN VARIABLES RECONNAISSANCE =====

}
# FUNCTION 2/4 : PRECONDITION CHECK

function Precondition-Check {
    echo "[DEBUG] Checking preconditions for t1595_002u" >&2

    # Vérification OS
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] This technique requires Linux" >&2
        return 2
    fi

    # Vérification outils requis
    local required_tools=("nmap" "gobuster" "dirb" "whatweb")
    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] $tool is required but not installed" >&2
            return 2
        fi
    done

    # Vérification version nmap
    local nmap_version=$(nmap --version | head -1 | grep -oP '\d+\.\d+')
    if [[ "$(echo "$nmap_version < 7.0" | bc -l)" -eq 1 ]]; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[WARNING] nmap version $nmap_version detected, 7.0+ recommended" >&2
    fi

    # Vérification réseau
    if ! ping -c 1 -W 1 8.8.8.8 &> /dev/null; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[WARNING] No internet connectivity detected" >&2
    fi

    # Vérification wordlist si spécifiée
    if [[ -n "${t1595_002u_WORDLIST}" ]] && [[ ! -r "${t1595_002u_WORDLIST}" ]]; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] Wordlist file not readable" >&2
        return 2
    fi

    # Validation des cibles HTTP/HTTPS
    local target_url="${!technique_id}_TARGETS"
    if ! curl -s --max-time 5 --head "$target_url" &> /dev/null; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[WARNING] Target URL may not be reachable" >&2
    fi

    return 0
}
# FUNCTION 3/4 : ATOMIC ACTION

function Atomic-Action {
    echo "[DEBUG] Executing atomic action for t1595_002u" >&2

    local web_results="${t1595_002u_RESULTS_DIR}/web_results.json"
    local nmap_output="${t1595_002u_RESULTS_DIR}/nmap_output.xml"
    local gobuster_output="${t1595_002u_RESULTS_DIR}/gobuster_output.txt"
    local dirb_output="${t1595_002u_RESULTS_DIR}/dirb_output.txt"
    local whatweb_output="${t1595_002u_RESULTS_DIR}/whatweb_output.txt"
    local scan_start=$(date +%s)

    # 1. Nmap Web Service Detection
    echo "[DEBUG] Running Nmap web service detection" >&2
    local nmap_cmd="nmap -p ${t1595_002u_WEB_PORTS} --script=http*"
    [[ "t1595_002u_OUTPUT_MODE" == "debug" ]] && echo "[DEBUG] Nmap command: $nmap_cmd ${t1595_002u_TARGETS}" >&2

    if ! eval "$nmap_cmd ${t1595_002u_TARGETS}" -oX "$nmap_output" > "${t1595_002u_RESULTS_DIR}/nmap_console.txt" 2>&1; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] Nmap web detection failed" >&2
        return 3
    fi

    # 2. Gobuster Directory Enumeration (si wordlist spécifiée)
    if [[ -n "${t1595_002u_WORDLIST}" ]]; then
        echo "[DEBUG] Running Gobuster directory enumeration" >&2
        local gobuster_cmd="gobuster dir -u ${t1595_002u_TARGETS} -w ${t1595_002u_WORDLIST}"
        gobuster_cmd="$gobuster_cmd -t ${t1595_002u_THREADS}"
        gobuster_cmd="$gobuster_cmd -a '${t1595_002u_USER_AGENT}'"
        gobuster_cmd="$gobuster_cmd -x ${t1595_002u_EXTENSIONS}"

        if [[ "${t1595_002u_RECURSIVE_SCAN}" == "true" ]]; then
            gobuster_cmd="$gobuster_cmd -r"
        fi

        [[ "t1595_002u_OUTPUT_MODE" == "debug" ]] && echo "[DEBUG] Gobuster command: $gobuster_cmd" >&2

        if ! eval "$gobuster_cmd" > "$gobuster_output" 2>&1; then
            [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[WARNING] Gobuster enumeration failed, continuing" >&2
        fi
    fi

    # 3. Dirb Content Scanning
    echo "[DEBUG] Running Dirb content scanning" >&2
    local dirb_cmd="dirb ${t1595_002u_TARGETS}"
    dirb_cmd="$dirb_cmd -a '${t1595_002u_USER_AGENT}'"
    dirb_cmd="$dirb_cmd -w"  # Don't stop on warnings

    [[ "t1595_002u_OUTPUT_MODE" == "debug" ]] && echo "[DEBUG] Dirb command: $dirb_cmd" >&2

    if ! eval "$dirb_cmd" > "$dirb_output" 2>&1; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[WARNING] Dirb scanning failed, continuing" >&2
    fi

    # 4. WhatWeb Technology Detection
    if [[ "${t1595_002u_TECHNOLOGY_DETECTION}" == "true" ]]; then
        echo "[DEBUG] Running WhatWeb technology detection" >&2
        local whatweb_cmd="whatweb ${t1595_002u_TARGETS}"
        whatweb_cmd="$whatweb_cmd -a '${t1595_002u_USER_AGENT}'"

        if [[ "${t1595_002u_AGGRESSIVE_MODE}" == "true" ]]; then
            whatweb_cmd="$whatweb_cmd -a 3"  # Aggressive mode
        fi

        [[ "t1595_002u_OUTPUT_MODE" == "debug" ]] && echo "[DEBUG] WhatWeb command: $whatweb_cmd" >&2

        if ! eval "$whatweb_cmd" > "$whatweb_output" 2>&1; then
            [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[WARNING] WhatWeb detection failed, continuing" >&2
        fi
    fi

    local scan_end=$(date +%s)
    local scan_duration=$((scan_end - scan_start))

    # Analyse des résultats
    local directories_found=$(grep -c "^20[0-9]" "$gobuster_output" 2>/dev/null || echo "0")
    local technologies_detected=$(grep -c "," "$whatweb_output" 2>/dev/null || echo "0")

    # Création du rapport JSON
    cat > "$web_results" << JSON_EOF
{
  "technique_id": "t1595_002u",
  "technique_name": "${technique_name}",
  "scan_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "scan_type": "${web_scan_type}",
  "scan_duration_seconds": $scan_duration,
  "configuration": {
    "targets": "${!technique_id}_TARGETS",
    "web_ports": "${t1595_002u_WEB_PORTS}",
    "wordlist": "${t1595_002u_WORDLIST}",
    "extensions": "${t1595_002u_EXTENSIONS}",
    "recursive_scan": ${t1595_002u_RECURSIVE_SCAN},
    "technology_detection": ${t1595_002u_TECHNOLOGY_DETECTION}
  },
  "results": {
    "directories_found": $directories_found,
    "technologies_detected": $technologies_detected,
    "scan_successful": true
  },
  "tools_executed": {
    "nmap": $([[ -f "$nmap_output" ]] && echo "true" || echo "false"),
    "gobuster": $([[ -f "$gobuster_output" ]] && echo "true" || echo "false"),
    "dirb": $([[ -f "$dirb_output" ]] && echo "true" || echo "false"),
    "whatweb": $([[ -f "$whatweb_output" ]] && echo "true" || echo "false")
  }
}
JSON_EOF

    return 0
}
# FUNCTION 4/4 : POSTCONDITION VERIFY

function Postcondition-Verify {
    echo "[DEBUG] Verifying postconditions for t1595_002u" >&2

    local results_dir="${!technique_id}_RESULTS_DIR"
    local web_results="$results_dir/web_results.json"

    # Vérification fichier principal de résultats
    if [[ ! -f "$web_results" ]]; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] Web results file missing" >&2
        return 4
    fi

    # Validation contenu JSON
    if ! jq empty "$web_results" 2>/dev/null; then
        [[ "t1595_002u_SILENT_MODE" != "true" ]] && echo "[ERROR] Invalid JSON in web results" >&2
        return 4
    fi

    # Création métadonnées d'exécution
    local metadata_file="$results_dir/metadata/execution_metadata.json"
    mkdir -p "$results_dir/metadata"

    cat > "$metadata_file" << META_EOF
{
  "execution_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "technique_id": "t1595_002u",
  "technique_name": "${technique_name}",
  "web_scan_type": "${web_scan_type}",
  "execution_mode": "${!technique_id}_OUTPUT_MODE",
  "silent_mode": "${!technique_id}_SILENT_MODE",
  "results_directory": "$results_dir",
  "files_generated": $(find "$results_dir" -type f 2>/dev/null | wc -l),
  "total_size_bytes": $(du -sb "$results_dir" 2>/dev/null | cut -f1 || echo 0),
  "configuration_snapshot": {
    "targets": "${!technique_id}_TARGETS",
    "wordlist": "${t1595_002u_WORDLIST}",
    "extensions": "${t1595_002u_EXTENSIONS}",
    "technology_detection": ${t1595_002u_TECHNOLOGY_DETECTION}
  }
}
META_EOF

    return 0
}
# MAIN EXECUTION ORCHESTRATOR

main() {
    # Orchestration des fonctions contractuelles
    Get-Configuration || exit $?
    Precondition-Check || exit $?
    Atomic-Action || exit $?

    # Sortie selon le mode
    case "${!technique_id}_OUTPUT_MODE" in
        "debug")
            echo "[DEBUG] ${technique_name} completed successfully" >&2
            echo "[DEBUG] Results saved to: ${t1595_002u_RESULTS_DIR}" >&2
            find "${!technique_id}_RESULTS_DIR" -name "*.json" -o -name "*.xml" -o -name "*.txt" | while read -r file; do
                echo "[DEBUG] Generated: $file" >&2
            done
            ;;
        "simple")
            echo "[SUCCESS] ${technique_name} completed" >&2
            echo "[INFO] Results saved to: ${t1595_002u_RESULTS_DIR}" >&2
            ;;
        "stealth")
            # Sortie minimale pour les opérations furtives
            ;;
        "silent")
            # Aucune sortie
            ;;
        *)
            echo "[INFO] ${technique_name} completed" >&2
            ;;
    esac

    Postcondition-Verify || exit $?
}
# SCRIPT ENTRY POINT

main "$@"
